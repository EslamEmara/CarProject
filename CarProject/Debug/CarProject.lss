
CarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000512  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800070  00800070  000005b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d6  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3b  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f6  00000000  00000000  00003513  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003e09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  8a:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <car_init>:

void car_moveBackward(void)
{
	/* move the 2 motors backward at the same speed 30 */
	Motor_moveBackwards(MOTOR_1_config,30);
	Motor_moveBackwards(MOTOR_2_config,30);
  92:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <MOTOR_1_config>
  96:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <MOTOR_1_config+0x1>
  9a:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <MOTOR_1_config+0x2>
  9e:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <MOTOR_1_config+0x3>
  a2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MOTOR_1_config+0x4>
  a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Motor_init>
  aa:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <MOTOR_2_config>
  ae:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <MOTOR_2_config+0x1>
  b2:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MOTOR_2_config+0x2>
  b6:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <MOTOR_2_config+0x3>
  ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <MOTOR_2_config+0x4>
  be:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Motor_init>
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 b8 00 	call	0x170	; 0x170 <Button_init>
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 b8 00 	call	0x170	; 0x170 <Button_init>
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 b8 00 	call	0x170	; 0x170 <Button_init>
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 b8 00 	call	0x170	; 0x170 <Button_init>
  e2:	08 95       	ret

000000e4 <car_updateState>:


void car_updateState(void)
{
	static uint8* status_Ptr = status_arr;
	if(Button_read_one_press(BUTTON_G,PULLUP_RES) == HIGH) // if G button is pressed
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Button_read_one_press>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	d9 f4       	brne	.+54     	; 0x128 <car_updateState+0x44>
	{
		if( *status_Ptr == B_30)
  f2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fa:	80 81       	ld	r24, Z
  fc:	84 30       	cpi	r24, 0x04	; 4
  fe:	51 f4       	brne	.+20     	; 0x114 <car_updateState+0x30>
		{
			status_Ptr = status_arr;  // reinitialize pointer position to the F_30
 100:	ec e6       	ldi	r30, 0x6C	; 108
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	f0 93 61 00 	sts	0x0061, r31	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 108:	e0 93 60 00 	sts	0x0060, r30	; 0x800060 <__DATA_REGION_ORIGIN__>
			Current_state = *status_Ptr;
 10c:	80 81       	ld	r24, Z
 10e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Current_state>
 112:	08 95       	ret
		}
		else
		{
			status_Ptr++;
 114:	cf 01       	movw	r24, r30
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			Current_state = *status_Ptr;
 120:	81 81       	ldd	r24, Z+1	; 0x01
 122:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Current_state>
 126:	08 95       	ret
		}
	}
	else if(Button_read_one_press(BUTTON_M,PULLUP_RES) == HIGH) // if M button is pressed
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Button_read_one_press>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	21 f4       	brne	.+8      	; 0x13e <car_updateState+0x5a>
	{
		Car_movement  = FORWARD;
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Car_movement>
 13c:	08 95       	ret
	}
	else if(Button_read_one_press(BUTTON_R,PULLUP_RES) == HIGH) // if R button is pressed
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Button_read_one_press>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	21 f4       	brne	.+8      	; 0x154 <car_updateState+0x70>
	{
		Car_movement  = RIGHT;
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Car_movement>
 152:	08 95       	ret
	}
	else if(Button_read_one_press(BUTTON_L,PULLUP_RES) == HIGH) // if L button is pressed
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Button_read_one_press>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	21 f4       	brne	.+8      	; 0x16a <car_updateState+0x86>
	{
		Car_movement  = LEFT;
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Car_movement>
 168:	08 95       	ret
	}
	else
	{
		Car_movement  = STOP;
 16a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Car_movement>
 16e:	08 95       	ret

00000170 <Button_init>:
 *	void return.
 *	Expected Output: PIN of the button is set as input.
 */
void Button_init(uint8 port,uint8 pin)
{
	if (pin <= 7)
 170:	68 30       	cpi	r22, 0x08	; 8
 172:	18 f4       	brcc	.+6      	; 0x17a <Button_init+0xa>
		DIO_SetPinDirection(port,pin,INPUT);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	0e 94 34 01 	call	0x268	; 0x268 <DIO_SetPinDirection>
 17a:	08 95       	ret

0000017c <Button_read>:
	uint8 current_state =  0;
	static uint8 last_state = 0;
	static uint16 counter = 0;
	static uint8 return_state = 0;

	if (conn == PULLDOWN_RES){
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	19 f4       	brne	.+6      	; 0x186 <Button_read+0xa>
		current_state =DIO_GetPinValue(port,pin);
 180:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_GetPinValue>
 184:	06 c0       	rjmp	.+12     	; 0x192 <Button_read+0x16>
	}
	else{
		current_state =!DIO_GetPinValue(port,pin);
 186:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_GetPinValue>
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	81 11       	cpse	r24, r1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	89 2f       	mov	r24, r25
	}

	if (current_state == last_state){
 192:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <last_state.1621>
 196:	89 13       	cpse	r24, r25
 198:	0a c0       	rjmp	.+20     	; 0x1ae <Button_read+0x32>
		counter++;
 19a:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <counter.1622>
 19e:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <counter.1622+0x1>
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <counter.1622+0x1>
 1aa:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <counter.1622>
	}

	if (counter > DEBOUNCTING_TIME)
 1ae:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <counter.1622>
 1b2:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <counter.1622+0x1>
 1b6:	29 3c       	cpi	r18, 0xC9	; 201
 1b8:	31 05       	cpc	r19, r1
 1ba:	30 f0       	brcs	.+12     	; 0x1c8 <Button_read+0x4c>
	{
		counter = 0;
 1bc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <counter.1622+0x1>
 1c0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <counter.1622>
		return_state = current_state;
 1c4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <return_state.1623>
	}

	last_state = current_state;
 1c8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <last_state.1621>

	return return_state;


}
 1cc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <return_state.1623>
 1d0:	08 95       	ret

000001d2 <Button_read_one_press>:
{
	static uint8 current_value =0;
	static uint8 last_value = 0;
	static uint8 return_value = 0;
	
	current_value = Button_read(port,pin,conn);
 1d2:	0e 94 be 00 	call	0x17c	; 0x17c <Button_read>
	
	if (current_value!=last_value){
 1d6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <last_value.1630>
 1da:	89 17       	cp	r24, r25
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <Button_read_one_press+0x12>
		return_value = current_value;					/*return pressed value */
 1de:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <Button_read_one_press+0x18>
	}
	else return_value = 2;								/*return any other value*/
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__data_end>
	
	last_value = current_value;							/*update variables*/
 1ea:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <last_value.1630>
	
	return return_value;
}
 1ee:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1f2:	08 95       	ret

000001f4 <Motor_init>:
 * Expected OUTPUT: Setting Pins of PWM and Direction as output.
					Initializing PWM.
 */

void Motor_init(ST_MOTORconfig_t config)
{
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <Motor_init+0x8>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <Motor_init+0xa>
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	49 83       	std	Y+1, r20	; 0x01
 206:	5a 83       	std	Y+2, r21	; 0x02
 208:	6b 83       	std	Y+3, r22	; 0x03
 20a:	7c 83       	std	Y+4, r23	; 0x04
	if(config.PWM_ID == PWM1)
 20c:	18 2f       	mov	r17, r24
 20e:	81 11       	cpse	r24, r1
 210:	06 c0       	rjmp	.+12     	; 0x21e <Motor_init+0x2a>
		pwm_init(PWM1,NON_INVERTING_MODE,PRESCALAR);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pwm_init>
		
	if(config.PWM_ID == PWM2)
 21e:	11 30       	cpi	r17, 0x01	; 1
 220:	31 f4       	brne	.+12     	; 0x22e <Motor_init+0x3a>
		pwm_init(PWM2,NON_INVERTING_MODE,PRESCALAR);
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pwm_init>
			
	if (config.DIR1_PIN <= 7 && config.DIR2_PIN <= 7 ){
 22e:	6a 81       	ldd	r22, Y+2	; 0x02
 230:	68 30       	cpi	r22, 0x08	; 8
 232:	60 f4       	brcc	.+24     	; 0x24c <Motor_init+0x58>
 234:	1c 81       	ldd	r17, Y+4	; 0x04
 236:	18 30       	cpi	r17, 0x08	; 8
 238:	48 f4       	brcc	.+18     	; 0x24c <Motor_init+0x58>
		DIO_SetPinDirection(config.DIR1_PORT,config.DIR1_PIN,OUTPUT);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	0e 94 34 01 	call	0x268	; 0x268 <DIO_SetPinDirection>
		DIO_SetPinDirection(config.DIR2_PORT,config.DIR2_PIN,OUTPUT);
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	61 2f       	mov	r22, r17
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	0e 94 34 01 	call	0x268	; 0x268 <DIO_SetPinDirection>

	}

	
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	08 95       	ret

0000025e <main>:
	ST_MOTORconfig_t motor2 = {portA,2,portA,3,PWM2};
		
	Motor_init(motor1);
	Motor_init(motor2);
	*/
	car_init();
 25e:	0e 94 49 00 	call	0x92	; 0x92 <car_init>
    /* Replace with your application code */
    while (1) 
    {
		car_updateState();
 262:	0e 94 72 00 	call	0xe4	; 0xe4 <car_updateState>
 266:	fd cf       	rjmp	.-6      	; 0x262 <main+0x4>

00000268 <DIO_SetPinDirection>:
		case portC :
			PORTC_REG = Value ; 
		break;
		
		case portD :
			PORTD_REG = Value ; 
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	11 f1       	breq	.+68     	; 0x2b0 <DIO_SetPinDirection+0x48>
 26c:	30 f0       	brcs	.+12     	; 0x27a <DIO_SetPinDirection+0x12>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	d1 f1       	breq	.+116    	; 0x2e6 <DIO_SetPinDirection+0x7e>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	09 f4       	brne	.+2      	; 0x278 <DIO_SetPinDirection+0x10>
 276:	52 c0       	rjmp	.+164    	; 0x31c <DIO_SetPinDirection+0xb4>
 278:	08 95       	ret
 27a:	41 30       	cpi	r20, 0x01	; 1
 27c:	59 f4       	brne	.+22     	; 0x294 <DIO_SetPinDirection+0x2c>
 27e:	2a b3       	in	r18, 0x1a	; 26
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_SetPinDirection+0x22>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_SetPinDirection+0x1e>
 28e:	82 2b       	or	r24, r18
 290:	8a bb       	out	0x1a, r24	; 26
 292:	08 95       	ret
 294:	41 11       	cpse	r20, r1
 296:	5c c0       	rjmp	.+184    	; 0x350 <DIO_SetPinDirection+0xe8>
 298:	2a b3       	in	r18, 0x1a	; 26
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPinDirection+0x3c>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPinDirection+0x38>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	8a bb       	out	0x1a, r24	; 26
 2ae:	08 95       	ret
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_SetPinDirection+0x62>
 2b4:	27 b3       	in	r18, 0x17	; 23
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_SetPinDirection+0x58>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_SetPinDirection+0x54>
 2c4:	82 2b       	or	r24, r18
 2c6:	87 bb       	out	0x17, r24	; 23
 2c8:	08 95       	ret
 2ca:	41 11       	cpse	r20, r1
 2cc:	41 c0       	rjmp	.+130    	; 0x350 <DIO_SetPinDirection+0xe8>
 2ce:	27 b3       	in	r18, 0x17	; 23
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_SetPinDirection+0x72>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_SetPinDirection+0x6e>
 2de:	80 95       	com	r24
 2e0:	82 23       	and	r24, r18
 2e2:	87 bb       	out	0x17, r24	; 23
 2e4:	08 95       	ret
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	59 f4       	brne	.+22     	; 0x300 <DIO_SetPinDirection+0x98>
 2ea:	24 b3       	in	r18, 0x14	; 20
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPinDirection+0x8e>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPinDirection+0x8a>
 2fa:	82 2b       	or	r24, r18
 2fc:	84 bb       	out	0x14, r24	; 20
 2fe:	08 95       	ret
 300:	41 11       	cpse	r20, r1
 302:	26 c0       	rjmp	.+76     	; 0x350 <DIO_SetPinDirection+0xe8>
 304:	24 b3       	in	r18, 0x14	; 20
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinDirection+0xa8>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinDirection+0xa4>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	84 bb       	out	0x14, r24	; 20
 31a:	08 95       	ret
 31c:	41 30       	cpi	r20, 0x01	; 1
 31e:	59 f4       	brne	.+22     	; 0x336 <DIO_SetPinDirection+0xce>
 320:	21 b3       	in	r18, 0x11	; 17
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_SetPinDirection+0xc4>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_SetPinDirection+0xc0>
 330:	82 2b       	or	r24, r18
 332:	81 bb       	out	0x11, r24	; 17
 334:	08 95       	ret
 336:	41 11       	cpse	r20, r1
 338:	0b c0       	rjmp	.+22     	; 0x350 <DIO_SetPinDirection+0xe8>
 33a:	21 b3       	in	r18, 0x11	; 17
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinDirection+0xde>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinDirection+0xda>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	81 bb       	out	0x11, r24	; 17
 350:	08 95       	ret

00000352 <DIO_GetPinValue>:
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
	switch (PortNumber) {
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	79 f0       	breq	.+30     	; 0x374 <DIO_GetPinValue+0x22>
 356:	28 f0       	brcs	.+10     	; 0x362 <DIO_GetPinValue+0x10>
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	a9 f0       	breq	.+42     	; 0x386 <DIO_GetPinValue+0x34>
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	e1 f0       	breq	.+56     	; 0x398 <DIO_GetPinValue+0x46>
 360:	24 c0       	rjmp	.+72     	; 0x3aa <DIO_GetPinValue+0x58>
		case portA : 
			value = (PINA_REG >> PinNumber) & 0x01 ; 	
 362:	89 b3       	in	r24, 0x19	; 25
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_GetPinValue+0x1a>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_GetPinValue+0x16>
 370:	81 70       	andi	r24, 0x01	; 1
		break;
 372:	08 95       	ret
		
		case portB :
			value = (PINB_REG >> PinNumber) & 0x01 ;
 374:	86 b3       	in	r24, 0x16	; 22
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_GetPinValue+0x2c>
 37a:	95 95       	asr	r25
 37c:	87 95       	ror	r24
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_GetPinValue+0x28>
 382:	81 70       	andi	r24, 0x01	; 1
		break;
 384:	08 95       	ret
		
		case portC :
			value = (PINC_REG >> PinNumber) & 0x01 ;
 386:	83 b3       	in	r24, 0x13	; 19
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_GetPinValue+0x3e>
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_GetPinValue+0x3a>
 394:	81 70       	andi	r24, 0x01	; 1
		break;
 396:	08 95       	ret

		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
 398:	80 b3       	in	r24, 0x10	; 16
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_GetPinValue+0x50>
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_GetPinValue+0x4c>
 3a6:	81 70       	andi	r24, 0x01	; 1
		break;
 3a8:	08 95       	ret
		break;
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
 3aa:	80 e0       	ldi	r24, 0x00	; 0
		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
		break;
	}
	return value ; 
}
 3ac:	08 95       	ret

000003ae <pwm_init>:
pwm mode	>> NON_INVERTING_MODE , INVERTING_MODE
prescalar	>> 0 , 8 , 64 , 256 , 1024
*/

void pwm_init (uint8 ID , uint8 mode , uint16 prescalar) {
	if (ID == PWM1) {
 3ae:	81 11       	cpse	r24, r1
 3b0:	56 c0       	rjmp	.+172    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
		PORTB_DIR |= (1<<3) ;
 3b2:	87 b3       	in	r24, 0x17	; 23
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	87 bb       	out	0x17, r24	; 23
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
 3b8:	61 11       	cpse	r22, r1
 3ba:	27 c0       	rjmp	.+78     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			switch (prescalar) {
 3bc:	40 34       	cpi	r20, 0x40	; 64
 3be:	51 05       	cpc	r21, r1
 3c0:	c1 f0       	breq	.+48     	; 0x3f2 <pwm_init+0x44>
 3c2:	38 f4       	brcc	.+14     	; 0x3d2 <pwm_init+0x24>
 3c4:	41 15       	cp	r20, r1
 3c6:	51 05       	cpc	r21, r1
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <pwm_init+0x34>
 3ca:	48 30       	cpi	r20, 0x08	; 8
 3cc:	51 05       	cpc	r21, r1
 3ce:	69 f0       	breq	.+26     	; 0x3ea <pwm_init+0x3c>
 3d0:	08 95       	ret
 3d2:	41 15       	cp	r20, r1
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	58 07       	cpc	r21, r24
 3d8:	81 f0       	breq	.+32     	; 0x3fa <pwm_init+0x4c>
 3da:	41 15       	cp	r20, r1
 3dc:	54 40       	sbci	r21, 0x04	; 4
 3de:	89 f0       	breq	.+34     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e0:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x69 ;
 3e2:	83 b7       	in	r24, 0x33	; 51
 3e4:	89 66       	ori	r24, 0x69	; 105
 3e6:	83 bf       	out	0x33, r24	; 51
					break ;
 3e8:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x6A ;
 3ea:	83 b7       	in	r24, 0x33	; 51
 3ec:	8a 66       	ori	r24, 0x6A	; 106
 3ee:	83 bf       	out	0x33, r24	; 51
					break ;
 3f0:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x6B ;
 3f2:	83 b7       	in	r24, 0x33	; 51
 3f4:	8b 66       	ori	r24, 0x6B	; 107
 3f6:	83 bf       	out	0x33, r24	; 51
					break ;
 3f8:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x6C ;
 3fa:	83 b7       	in	r24, 0x33	; 51
 3fc:	8c 66       	ori	r24, 0x6C	; 108
 3fe:	83 bf       	out	0x33, r24	; 51
					break ;
 400:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x6D ;
 402:	83 b7       	in	r24, 0x33	; 51
 404:	8d 66       	ori	r24, 0x6D	; 109
 406:	83 bf       	out	0x33, r24	; 51
					break ;
 408:	08 95       	ret
				}
			}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
 40a:	61 30       	cpi	r22, 0x01	; 1
 40c:	09 f0       	breq	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40e:	7e c0       	rjmp	.+252    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
			switch (prescalar) {
 410:	40 34       	cpi	r20, 0x40	; 64
 412:	51 05       	cpc	r21, r1
 414:	c1 f0       	breq	.+48     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 416:	38 f4       	brcc	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 418:	41 15       	cp	r20, r1
 41a:	51 05       	cpc	r21, r1
 41c:	61 f0       	breq	.+24     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41e:	48 30       	cpi	r20, 0x08	; 8
 420:	51 05       	cpc	r21, r1
 422:	69 f0       	breq	.+26     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 424:	08 95       	ret
 426:	41 15       	cp	r20, r1
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	58 07       	cpc	r21, r24
 42c:	81 f0       	breq	.+32     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 42e:	41 15       	cp	r20, r1
 430:	54 40       	sbci	r21, 0x04	; 4
 432:	89 f0       	breq	.+34     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 434:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x79 ;
 436:	83 b7       	in	r24, 0x33	; 51
 438:	89 67       	ori	r24, 0x79	; 121
 43a:	83 bf       	out	0x33, r24	; 51
					break ;
 43c:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x7A ;
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	8a 67       	ori	r24, 0x7A	; 122
 442:	83 bf       	out	0x33, r24	; 51
					break ;
 444:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x7B ;
 446:	83 b7       	in	r24, 0x33	; 51
 448:	8b 67       	ori	r24, 0x7B	; 123
 44a:	83 bf       	out	0x33, r24	; 51
					break ;
 44c:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x7C ;
 44e:	83 b7       	in	r24, 0x33	; 51
 450:	8c 67       	ori	r24, 0x7C	; 124
 452:	83 bf       	out	0x33, r24	; 51
					break ;
 454:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x7D ;
 456:	83 b7       	in	r24, 0x33	; 51
 458:	8d 67       	ori	r24, 0x7D	; 125
 45a:	83 bf       	out	0x33, r24	; 51
					break ;
 45c:	08 95       	ret
				}
			}
	}
	else if (ID == PWM2) {
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	09 f0       	breq	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 462:	54 c0       	rjmp	.+168    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
		 PORTD_DIR |= ( 1<< 7 ) ;
 464:	81 b3       	in	r24, 0x11	; 17
 466:	80 68       	ori	r24, 0x80	; 128
 468:	81 bb       	out	0x11, r24	; 17
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
 46a:	61 11       	cpse	r22, r1
 46c:	27 c0       	rjmp	.+78     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			switch (prescalar) {
 46e:	40 34       	cpi	r20, 0x40	; 64
 470:	51 05       	cpc	r21, r1
 472:	c1 f0       	breq	.+48     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 474:	38 f4       	brcc	.+14     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 476:	41 15       	cp	r20, r1
 478:	51 05       	cpc	r21, r1
 47a:	61 f0       	breq	.+24     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 47c:	48 30       	cpi	r20, 0x08	; 8
 47e:	51 05       	cpc	r21, r1
 480:	69 f0       	breq	.+26     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 482:	08 95       	ret
 484:	41 15       	cp	r20, r1
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	58 07       	cpc	r21, r24
 48a:	81 f0       	breq	.+32     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 48c:	41 15       	cp	r20, r1
 48e:	54 40       	sbci	r21, 0x04	; 4
 490:	89 f0       	breq	.+34     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 492:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x69 ;
 494:	85 b5       	in	r24, 0x25	; 37
 496:	89 66       	ori	r24, 0x69	; 105
 498:	85 bd       	out	0x25, r24	; 37
					break ;
 49a:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x6A ;
 49c:	85 b5       	in	r24, 0x25	; 37
 49e:	8a 66       	ori	r24, 0x6A	; 106
 4a0:	85 bd       	out	0x25, r24	; 37
					break ;
 4a2:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x6B ;
 4a4:	85 b5       	in	r24, 0x25	; 37
 4a6:	8b 66       	ori	r24, 0x6B	; 107
 4a8:	85 bd       	out	0x25, r24	; 37
					break ;
 4aa:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x6C ;
 4ac:	85 b5       	in	r24, 0x25	; 37
 4ae:	8c 66       	ori	r24, 0x6C	; 108
 4b0:	85 bd       	out	0x25, r24	; 37
					break ;
 4b2:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x6D ;
 4b4:	85 b5       	in	r24, 0x25	; 37
 4b6:	8d 66       	ori	r24, 0x6D	; 109
 4b8:	85 bd       	out	0x25, r24	; 37
					break ;
 4ba:	08 95       	ret
			}
		}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
 4bc:	61 30       	cpi	r22, 0x01	; 1
 4be:	31 f5       	brne	.+76     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
			switch (prescalar) {
 4c0:	40 34       	cpi	r20, 0x40	; 64
 4c2:	51 05       	cpc	r21, r1
 4c4:	c1 f0       	breq	.+48     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4c6:	38 f4       	brcc	.+14     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4c8:	41 15       	cp	r20, r1
 4ca:	51 05       	cpc	r21, r1
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4ce:	48 30       	cpi	r20, 0x08	; 8
 4d0:	51 05       	cpc	r21, r1
 4d2:	69 f0       	breq	.+26     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4d4:	08 95       	ret
 4d6:	41 15       	cp	r20, r1
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	58 07       	cpc	r21, r24
 4dc:	81 f0       	breq	.+32     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4de:	41 15       	cp	r20, r1
 4e0:	54 40       	sbci	r21, 0x04	; 4
 4e2:	89 f0       	breq	.+34     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4e4:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x79 ;
 4e6:	85 b5       	in	r24, 0x25	; 37
 4e8:	89 67       	ori	r24, 0x79	; 121
 4ea:	85 bd       	out	0x25, r24	; 37
					break ;
 4ec:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x7A ;
 4ee:	85 b5       	in	r24, 0x25	; 37
 4f0:	8a 67       	ori	r24, 0x7A	; 122
 4f2:	85 bd       	out	0x25, r24	; 37
					break ;
 4f4:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x7B ;
 4f6:	85 b5       	in	r24, 0x25	; 37
 4f8:	8b 67       	ori	r24, 0x7B	; 123
 4fa:	85 bd       	out	0x25, r24	; 37
					break ;
 4fc:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x7C ;
 4fe:	85 b5       	in	r24, 0x25	; 37
 500:	8c 67       	ori	r24, 0x7C	; 124
 502:	85 bd       	out	0x25, r24	; 37
					break ;
 504:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x7D ;
 506:	85 b5       	in	r24, 0x25	; 37
 508:	8d 67       	ori	r24, 0x7D	; 125
 50a:	85 bd       	out	0x25, r24	; 37
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
