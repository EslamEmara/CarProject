
CarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000007ee  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  00000892  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001230  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a70  00000000  00000000  00002626  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fe  00000000  00000000  000038c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000041c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 01 	call	0x3da	; 0x3da <main>
  8a:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <car_init>:


void car_init(void)
{
	/* init motor1 */
	Motor_init(MOTOR_1_config);
  92:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <MOTOR_1_config>
  96:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <MOTOR_1_config+0x1>
  9a:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <MOTOR_1_config+0x2>
  9e:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <MOTOR_1_config+0x3>
  a2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MOTOR_1_config+0x4>
  a6:	0e 94 4b 01 	call	0x296	; 0x296 <Motor_init>
	/* init motor2 */
	Motor_init(MOTOR_2_config );
  aa:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <MOTOR_2_config>
  ae:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <MOTOR_2_config+0x1>
  b2:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MOTOR_2_config+0x2>
  b6:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <MOTOR_2_config+0x3>
  ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <MOTOR_2_config+0x4>
  be:	0e 94 4b 01 	call	0x296	; 0x296 <Motor_init>
	
	/* init buttons */
	Button_init(BUTTON_G); // button 1 (G -> speed and direction)
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 2b 01 	call	0x256	; 0x256 <Button_init>
	Button_init(BUTTON_M); // button 2 (MOVE)
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 2b 01 	call	0x256	; 0x256 <Button_init>
	Button_init(BUTTON_L); // button 3 (left)
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 2b 01 	call	0x256	; 0x256 <Button_init>
	Button_init(BUTTON_R); // button 4 (right)
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 2b 01 	call	0x256	; 0x256 <Button_init>
  e2:	08 95       	ret

000000e4 <car_moveRight>:
}


void car_moveRight(uint8 speed)
{
  e4:	cf 93       	push	r28
  e6:	c8 2f       	mov	r28, r24
	/* move the 2 motors right at the same desired speed */
	Motor_moveBackwards(MOTOR_1_config,speed);
  e8:	28 2f       	mov	r18, r24
  ea:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <MOTOR_1_config>
  ee:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <MOTOR_1_config+0x1>
  f2:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <MOTOR_1_config+0x2>
  f6:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <MOTOR_1_config+0x3>
  fa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MOTOR_1_config+0x4>
  fe:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_moveBackwards>
	Motor_moveForward(MOTOR_2_config,speed);
 102:	2c 2f       	mov	r18, r28
 104:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <MOTOR_2_config>
 108:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <MOTOR_2_config+0x1>
 10c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MOTOR_2_config+0x2>
 110:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <MOTOR_2_config+0x3>
 114:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <MOTOR_2_config+0x4>
 118:	0e 94 80 01 	call	0x300	; 0x300 <Motor_moveForward>
}
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <car_moveLeft>:


void car_moveLeft(uint8 speed)
{
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
	/* move the 2 motors left at the same desired speed */
	Motor_moveForward(MOTOR_1_config,speed);
 124:	28 2f       	mov	r18, r24
 126:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <MOTOR_1_config>
 12a:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <MOTOR_1_config+0x1>
 12e:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <MOTOR_1_config+0x2>
 132:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <MOTOR_1_config+0x3>
 136:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MOTOR_1_config+0x4>
 13a:	0e 94 80 01 	call	0x300	; 0x300 <Motor_moveForward>
	Motor_moveBackwards(MOTOR_2_config,speed);
 13e:	2c 2f       	mov	r18, r28
 140:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <MOTOR_2_config>
 144:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <MOTOR_2_config+0x1>
 148:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MOTOR_2_config+0x2>
 14c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <MOTOR_2_config+0x3>
 150:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <MOTOR_2_config+0x4>
 154:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_moveBackwards>
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <car_moveForward>:
void car_moveForward(uint8 speed)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
	/* move the 2 motors forward at the same desired speed */
	Motor_moveForward(MOTOR_1_config,speed);
 160:	28 2f       	mov	r18, r24
 162:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <MOTOR_1_config>
 166:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <MOTOR_1_config+0x1>
 16a:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <MOTOR_1_config+0x2>
 16e:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <MOTOR_1_config+0x3>
 172:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MOTOR_1_config+0x4>
 176:	0e 94 80 01 	call	0x300	; 0x300 <Motor_moveForward>
	Motor_moveForward(MOTOR_2_config,speed);
 17a:	2c 2f       	mov	r18, r28
 17c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <MOTOR_2_config>
 180:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <MOTOR_2_config+0x1>
 184:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MOTOR_2_config+0x2>
 188:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <MOTOR_2_config+0x3>
 18c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <MOTOR_2_config+0x4>
 190:	0e 94 80 01 	call	0x300	; 0x300 <Motor_moveForward>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <car_moveBackward>:


void car_moveBackward(void)
{
	/* move the 2 motors backward at the same speed 30 */
	Motor_moveBackwards(MOTOR_1_config,30);
 198:	2e e1       	ldi	r18, 0x1E	; 30
 19a:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <MOTOR_1_config>
 19e:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <MOTOR_1_config+0x1>
 1a2:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <MOTOR_1_config+0x2>
 1a6:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <MOTOR_1_config+0x3>
 1aa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MOTOR_1_config+0x4>
 1ae:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_moveBackwards>
	Motor_moveBackwards(MOTOR_2_config,30);
 1b2:	2e e1       	ldi	r18, 0x1E	; 30
 1b4:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <MOTOR_2_config>
 1b8:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <MOTOR_2_config+0x1>
 1bc:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <MOTOR_2_config+0x2>
 1c0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <MOTOR_2_config+0x3>
 1c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <MOTOR_2_config+0x4>
 1c8:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_moveBackwards>
 1cc:	08 95       	ret

000001ce <car_updateState>:


void car_updateState(void)
{
	static uint8* status_Ptr = status_arr;
	if(Button_read_one_press(BUTTON_G,PULLUP_RES) == HIGH) // if G button is pressed
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 3e 01 	call	0x27c	; 0x27c <Button_read_one_press>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	c9 f4       	brne	.+50     	; 0x20e <car_updateState+0x40>
	{
		if( *status_Ptr == B_30)
 1dc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e4:	80 81       	ld	r24, Z
 1e6:	88 37       	cpi	r24, 0x78	; 120
 1e8:	51 f4       	brne	.+20     	; 0x1fe <car_updateState+0x30>
		{
			status_Ptr = status_arr;  // reinitialize pointer position to the F_30
 1ea:	ec e6       	ldi	r30, 0x6C	; 108
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	f0 93 61 00 	sts	0x0061, r31	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	e0 93 60 00 	sts	0x0060, r30	; 0x800060 <__DATA_REGION_ORIGIN__>
			Current_state = *status_Ptr;
 1f6:	80 81       	ld	r24, Z
 1f8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Current_state>
 1fc:	08 95       	ret
		}
		else
		{
			Current_state = *status_Ptr;
 1fe:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Current_state>
			status_Ptr++;
 202:	31 96       	adiw	r30, 0x01	; 1
 204:	f0 93 61 00 	sts	0x0061, r31	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 208:	e0 93 60 00 	sts	0x0060, r30	; 0x800060 <__DATA_REGION_ORIGIN__>
 20c:	08 95       	ret
		}
	}
	else if(Button_read(BUTTON_M,PULLUP_RES) == HIGH) // if M button is pressed
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 31 01 	call	0x262	; 0x262 <Button_read>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	21 f4       	brne	.+8      	; 0x224 <car_updateState+0x56>
	{
		Car_movement  = FORWARD;
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Car_movement>
 222:	08 95       	ret
	}
	else if(Button_read(BUTTON_R,PULLUP_RES) == HIGH) // if R button is pressed
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 31 01 	call	0x262	; 0x262 <Button_read>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	21 f4       	brne	.+8      	; 0x23a <car_updateState+0x6c>
	{
		Car_movement  = RIGHT;
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Car_movement>
 238:	08 95       	ret
	}
	else if(Button_read(BUTTON_L,PULLUP_RES) == HIGH) // if L button is pressed
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 31 01 	call	0x262	; 0x262 <Button_read>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	21 f4       	brne	.+8      	; 0x250 <car_updateState+0x82>
	{
		Car_movement  = LEFT;
 248:	87 e0       	ldi	r24, 0x07	; 7
 24a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Car_movement>
 24e:	08 95       	ret
	}
	else
	{
		Car_movement  = STOP;
 250:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Car_movement>
 254:	08 95       	ret

00000256 <Button_init>:
 *	void return.
 *	Expected Output: PIN of the button is set as input.
 */
void Button_init(uint8 port,uint8 pin)
{
	if (pin <= 7)
 256:	68 30       	cpi	r22, 0x08	; 8
 258:	18 f4       	brcc	.+6      	; 0x260 <Button_init+0xa>
		DIO_SetPinDirection(port,pin,INPUT);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_SetPinDirection>
 260:	08 95       	ret

00000262 <Button_read>:
 *	=================PS:: FUNCTION MUST BE CALLED PERIDOCALLY TO AVOID DEBOUNCING EFFECTS======================
 * change DEBOUNCING TIME macro in Button.h according to your app.
 */
uint8 Button_read(uint8 port,uint8 pin,EN_CONN_t conn)
{
	if (conn == PULLDOWN_RES){
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	21 f4       	brne	.+8      	; 0x26e <Button_read+0xc>
		return DIO_GetPinValue(port,pin);
 266:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_GetPinValue>
 26a:	98 2f       	mov	r25, r24
 26c:	05 c0       	rjmp	.+10     	; 0x278 <Button_read+0x16>
	}
	else{
		return !DIO_GetPinValue(port,pin);
 26e:	0e 94 de 02 	call	0x5bc	; 0x5bc <DIO_GetPinValue>
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	81 11       	cpse	r24, r1
 276:	90 e0       	ldi	r25, 0x00	; 0
	}

}
 278:	89 2f       	mov	r24, r25
 27a:	08 95       	ret

0000027c <Button_read_one_press>:
{
	uint8 current_value =0;
	static uint8 last_value = 0;
	uint8 return_value = 0;
	
	current_value = Button_read(port,pin,conn);
 27c:	0e 94 31 01 	call	0x262	; 0x262 <Button_read>
	
	if (current_value!=last_value){
 280:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <__data_end>
 284:	89 13       	cpse	r24, r25
 286:	02 c0       	rjmp	.+4      	; 0x28c <Button_read_one_press+0x10>
		return_value = current_value;					/*return pressed value */
	}
	else return_value = 2;								/*return any other value*/
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	01 c0       	rjmp	.+2      	; 0x28e <Button_read_one_press+0x12>
	uint8 return_value = 0;
	
	current_value = Button_read(port,pin,conn);
	
	if (current_value!=last_value){
		return_value = current_value;					/*return pressed value */
 28c:	98 2f       	mov	r25, r24
	}
	else return_value = 2;								/*return any other value*/
	
	last_value = current_value;							/*update variables*/
 28e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	
	return return_value;
}
 292:	89 2f       	mov	r24, r25
 294:	08 95       	ret

00000296 <Motor_init>:
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	00 d0       	rcall	.+0      	; 0x29e <Motor_init+0x8>
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <Motor_init+0xa>
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	49 83       	std	Y+1, r20	; 0x01
 2a8:	5a 83       	std	Y+2, r21	; 0x02
 2aa:	6b 83       	std	Y+3, r22	; 0x03
 2ac:	7c 83       	std	Y+4, r23	; 0x04
 2ae:	18 2f       	mov	r17, r24
 2b0:	81 11       	cpse	r24, r1
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <Motor_init+0x2a>
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 0c 03 	call	0x618	; 0x618 <pwm_init>
 2c0:	11 30       	cpi	r17, 0x01	; 1
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <Motor_init+0x3a>
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 0c 03 	call	0x618	; 0x618 <pwm_init>
 2d0:	6a 81       	ldd	r22, Y+2	; 0x02
 2d2:	68 30       	cpi	r22, 0x08	; 8
 2d4:	60 f4       	brcc	.+24     	; 0x2ee <Motor_init+0x58>
 2d6:	1c 81       	ldd	r17, Y+4	; 0x04
 2d8:	18 30       	cpi	r17, 0x08	; 8
 2da:	48 f4       	brcc	.+18     	; 0x2ee <Motor_init+0x58>
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_SetPinDirection>
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	61 2f       	mov	r22, r17
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_SetPinDirection>
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	08 95       	ret

00000300 <Motor_moveForward>:
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	00 d0       	rcall	.+0      	; 0x308 <Motor_moveForward+0x8>
 308:	00 d0       	rcall	.+0      	; 0x30a <Motor_moveForward+0xa>
 30a:	1f 92       	push	r1
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	94 2f       	mov	r25, r20
 312:	6b 83       	std	Y+3, r22	; 0x03
 314:	7c 83       	std	Y+4, r23	; 0x04
 316:	8d 83       	std	Y+5, r24	; 0x05
 318:	12 2f       	mov	r17, r18
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	65 2f       	mov	r22, r21
 31e:	89 2f       	mov	r24, r25
 320:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_SetPinValue>
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	6c 81       	ldd	r22, Y+4	; 0x04
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_SetPinValue>
 32e:	15 36       	cpi	r17, 0x65	; 101
 330:	20 f4       	brcc	.+8      	; 0x33a <Motor_moveForward+0x3a>
 332:	61 2f       	mov	r22, r17
 334:	8d 81       	ldd	r24, Y+5	; 0x05
 336:	0e 94 bc 03 	call	0x778	; 0x778 <pwm_SetSpeed>
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	08 95       	ret

0000034c <Motor_moveBackwards>:
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	00 d0       	rcall	.+0      	; 0x354 <Motor_moveBackwards+0x8>
 354:	00 d0       	rcall	.+0      	; 0x356 <Motor_moveBackwards+0xa>
 356:	1f 92       	push	r1
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	49 83       	std	Y+1, r20	; 0x01
 35e:	5a 83       	std	Y+2, r21	; 0x02
 360:	96 2f       	mov	r25, r22
 362:	67 2f       	mov	r22, r23
 364:	8d 83       	std	Y+5, r24	; 0x05
 366:	12 2f       	mov	r17, r18
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	89 2f       	mov	r24, r25
 36c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_SetPinValue>
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	6a 81       	ldd	r22, Y+2	; 0x02
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_SetPinValue>
 37a:	15 36       	cpi	r17, 0x65	; 101
 37c:	20 f4       	brcc	.+8      	; 0x386 <Motor_moveBackwards+0x3a>
 37e:	61 2f       	mov	r22, r17
 380:	8d 81       	ldd	r24, Y+5	; 0x05
 382:	0e 94 bc 03 	call	0x778	; 0x778 <pwm_SetSpeed>
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	08 95       	ret

00000398 <app>:
 * Author : EslamEmara
 */ 

#include "APP/car.h"
void app(){
	if (Car_movement == FORWARD){
 398:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <Car_movement>
 39c:	85 30       	cpi	r24, 0x05	; 5
 39e:	61 f4       	brne	.+24     	; 0x3b8 <app+0x20>
		if (Current_state < 100){
 3a0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Current_state>
 3a4:	84 36       	cpi	r24, 0x64	; 100
 3a6:	18 f4       	brcc	.+6      	; 0x3ae <app+0x16>
			car_moveForward(Current_state);
 3a8:	0e 94 ae 00 	call	0x15c	; 0x15c <car_moveForward>
 3ac:	08 95       	ret
		}
		else if(Current_state > 100){
 3ae:	85 36       	cpi	r24, 0x65	; 101
 3b0:	98 f0       	brcs	.+38     	; 0x3d8 <app+0x40>
			car_moveBackward();
 3b2:	0e 94 cc 00 	call	0x198	; 0x198 <car_moveBackward>
 3b6:	08 95       	ret
		}
	}
	else if (Car_movement == LEFT){
 3b8:	87 30       	cpi	r24, 0x07	; 7
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <app+0x2c>
		car_moveLeft(30);
 3bc:	8e e1       	ldi	r24, 0x1E	; 30
 3be:	0e 94 90 00 	call	0x120	; 0x120 <car_moveLeft>
 3c2:	08 95       	ret
	}
	else if (Car_movement == RIGHT){
 3c4:	86 30       	cpi	r24, 0x06	; 6
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <app+0x38>
		car_moveRight(30);
 3c8:	8e e1       	ldi	r24, 0x1E	; 30
 3ca:	0e 94 72 00 	call	0xe4	; 0xe4 <car_moveRight>
 3ce:	08 95       	ret
	}
	else if(Car_movement == STOP){
 3d0:	81 11       	cpse	r24, r1
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <app+0x40>
		car_moveForward(0);
 3d4:	0e 94 ae 00 	call	0x15c	; 0x15c <car_moveForward>
 3d8:	08 95       	ret

000003da <main>:
	ST_MOTORconfig_t motor2 = {portA,2,portA,3,PWM2};
		
	Motor_init(motor1);
	Motor_init(motor2);
	*/
	car_init();
 3da:	0e 94 49 00 	call	0x92	; 0x92 <car_init>
    /* Replace with your application code */
    while (1) 
    {
		car_updateState();
 3de:	0e 94 e7 00 	call	0x1ce	; 0x1ce <car_updateState>
		app();
 3e2:	0e 94 cc 01 	call	0x398	; 0x398 <app>
 3e6:	fb cf       	rjmp	.-10     	; 0x3de <main+0x4>

000003e8 <DIO_SetPinDirection>:
		case portC :
			PORTC_REG = Value ; 
		break;
		
		case portD :
			PORTD_REG = Value ; 
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	11 f1       	breq	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3ec:	30 f0       	brcs	.+12     	; 0x3fa <DIO_SetPinDirection+0x12>
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	d1 f1       	breq	.+116    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 3f2:	83 30       	cpi	r24, 0x03	; 3
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <DIO_SetPinDirection+0x10>
 3f6:	52 c0       	rjmp	.+164    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 3f8:	08 95       	ret
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	59 f4       	brne	.+22     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3fe:	2a b3       	in	r18, 0x1a	; 26
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	8a bb       	out	0x1a, r24	; 26
 412:	08 95       	ret
 414:	41 11       	cpse	r20, r1
 416:	5c c0       	rjmp	.+184    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 418:	2a b3       	in	r18, 0x1a	; 26
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	80 95       	com	r24
 42a:	82 23       	and	r24, r18
 42c:	8a bb       	out	0x1a, r24	; 26
 42e:	08 95       	ret
 430:	41 30       	cpi	r20, 0x01	; 1
 432:	59 f4       	brne	.+22     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 434:	27 b3       	in	r18, 0x17	; 23
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	82 2b       	or	r24, r18
 446:	87 bb       	out	0x17, r24	; 23
 448:	08 95       	ret
 44a:	41 11       	cpse	r20, r1
 44c:	41 c0       	rjmp	.+130    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 44e:	27 b3       	in	r18, 0x17	; 23
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	80 95       	com	r24
 460:	82 23       	and	r24, r18
 462:	87 bb       	out	0x17, r24	; 23
 464:	08 95       	ret
 466:	41 30       	cpi	r20, 0x01	; 1
 468:	59 f4       	brne	.+22     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 46a:	24 b3       	in	r18, 0x14	; 20
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 47a:	82 2b       	or	r24, r18
 47c:	84 bb       	out	0x14, r24	; 20
 47e:	08 95       	ret
 480:	41 11       	cpse	r20, r1
 482:	26 c0       	rjmp	.+76     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 484:	24 b3       	in	r18, 0x14	; 20
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 494:	80 95       	com	r24
 496:	82 23       	and	r24, r18
 498:	84 bb       	out	0x14, r24	; 20
 49a:	08 95       	ret
 49c:	41 30       	cpi	r20, 0x01	; 1
 49e:	59 f4       	brne	.+22     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4a0:	21 b3       	in	r18, 0x11	; 17
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4b0:	82 2b       	or	r24, r18
 4b2:	81 bb       	out	0x11, r24	; 17
 4b4:	08 95       	ret
 4b6:	41 11       	cpse	r20, r1
 4b8:	0b c0       	rjmp	.+22     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ba:	21 b3       	in	r18, 0x11	; 17
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ca:	80 95       	com	r24
 4cc:	82 23       	and	r24, r18
 4ce:	81 bb       	out	0x11, r24	; 17
 4d0:	08 95       	ret

000004d2 <DIO_SetPinValue>:
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	11 f1       	breq	.+68     	; 0x51a <DIO_SetPinValue+0x48>
 4d6:	30 f0       	brcs	.+12     	; 0x4e4 <DIO_SetPinValue+0x12>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	d1 f1       	breq	.+116    	; 0x550 <DIO_SetPinValue+0x7e>
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	09 f4       	brne	.+2      	; 0x4e2 <DIO_SetPinValue+0x10>
 4e0:	52 c0       	rjmp	.+164    	; 0x586 <DIO_SetPinValue+0xb4>
 4e2:	08 95       	ret
 4e4:	41 30       	cpi	r20, 0x01	; 1
 4e6:	59 f4       	brne	.+22     	; 0x4fe <DIO_SetPinValue+0x2c>
 4e8:	2b b3       	in	r18, 0x1b	; 27
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_SetPinValue+0x22>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_SetPinValue+0x1e>
 4f8:	82 2b       	or	r24, r18
 4fa:	8b bb       	out	0x1b, r24	; 27
 4fc:	08 95       	ret
 4fe:	41 11       	cpse	r20, r1
 500:	5c c0       	rjmp	.+184    	; 0x5ba <DIO_SetPinValue+0xe8>
 502:	2b b3       	in	r18, 0x1b	; 27
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_SetPinValue+0x3c>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_SetPinValue+0x38>
 512:	80 95       	com	r24
 514:	82 23       	and	r24, r18
 516:	8b bb       	out	0x1b, r24	; 27
 518:	08 95       	ret
 51a:	41 30       	cpi	r20, 0x01	; 1
 51c:	59 f4       	brne	.+22     	; 0x534 <DIO_SetPinValue+0x62>
 51e:	28 b3       	in	r18, 0x18	; 24
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_SetPinValue+0x58>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_SetPinValue+0x54>
 52e:	82 2b       	or	r24, r18
 530:	88 bb       	out	0x18, r24	; 24
 532:	08 95       	ret
 534:	41 11       	cpse	r20, r1
 536:	41 c0       	rjmp	.+130    	; 0x5ba <DIO_SetPinValue+0xe8>
 538:	28 b3       	in	r18, 0x18	; 24
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_SetPinValue+0x72>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_SetPinValue+0x6e>
 548:	80 95       	com	r24
 54a:	82 23       	and	r24, r18
 54c:	88 bb       	out	0x18, r24	; 24
 54e:	08 95       	ret
 550:	41 30       	cpi	r20, 0x01	; 1
 552:	59 f4       	brne	.+22     	; 0x56a <DIO_SetPinValue+0x98>
 554:	25 b3       	in	r18, 0x15	; 21
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_SetPinValue+0x8e>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_SetPinValue+0x8a>
 564:	82 2b       	or	r24, r18
 566:	85 bb       	out	0x15, r24	; 21
 568:	08 95       	ret
 56a:	41 11       	cpse	r20, r1
 56c:	26 c0       	rjmp	.+76     	; 0x5ba <DIO_SetPinValue+0xe8>
 56e:	25 b3       	in	r18, 0x15	; 21
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_SetPinValue+0xa8>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_SetPinValue+0xa4>
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	85 bb       	out	0x15, r24	; 21
 584:	08 95       	ret
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	59 f4       	brne	.+22     	; 0x5a0 <DIO_SetPinValue+0xce>
 58a:	22 b3       	in	r18, 0x12	; 18
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_SetPinValue+0xc4>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_SetPinValue+0xc0>
 59a:	82 2b       	or	r24, r18
 59c:	82 bb       	out	0x12, r24	; 18
 59e:	08 95       	ret
 5a0:	41 11       	cpse	r20, r1
 5a2:	0b c0       	rjmp	.+22     	; 0x5ba <DIO_SetPinValue+0xe8>
 5a4:	22 b3       	in	r18, 0x12	; 18
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_SetPinValue+0xde>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_SetPinValue+0xda>
 5b4:	80 95       	com	r24
 5b6:	82 23       	and	r24, r18
 5b8:	82 bb       	out	0x12, r24	; 18
 5ba:	08 95       	ret

000005bc <DIO_GetPinValue>:
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
	switch (PortNumber) {
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	79 f0       	breq	.+30     	; 0x5de <DIO_GetPinValue+0x22>
 5c0:	28 f0       	brcs	.+10     	; 0x5cc <DIO_GetPinValue+0x10>
 5c2:	82 30       	cpi	r24, 0x02	; 2
 5c4:	a9 f0       	breq	.+42     	; 0x5f0 <DIO_GetPinValue+0x34>
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	e1 f0       	breq	.+56     	; 0x602 <DIO_GetPinValue+0x46>
 5ca:	24 c0       	rjmp	.+72     	; 0x614 <DIO_GetPinValue+0x58>
		case portA : 
			value = (PINA_REG >> PinNumber) & 0x01 ; 	
 5cc:	89 b3       	in	r24, 0x19	; 25
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_GetPinValue+0x1a>
 5d2:	95 95       	asr	r25
 5d4:	87 95       	ror	r24
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_GetPinValue+0x16>
 5da:	81 70       	andi	r24, 0x01	; 1
		break;
 5dc:	08 95       	ret
		
		case portB :
			value = (PINB_REG >> PinNumber) & 0x01 ;
 5de:	86 b3       	in	r24, 0x16	; 22
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_GetPinValue+0x2c>
 5e4:	95 95       	asr	r25
 5e6:	87 95       	ror	r24
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_GetPinValue+0x28>
 5ec:	81 70       	andi	r24, 0x01	; 1
		break;
 5ee:	08 95       	ret
		
		case portC :
			value = (PINC_REG >> PinNumber) & 0x01 ;
 5f0:	83 b3       	in	r24, 0x13	; 19
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_GetPinValue+0x3e>
 5f6:	95 95       	asr	r25
 5f8:	87 95       	ror	r24
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_GetPinValue+0x3a>
 5fe:	81 70       	andi	r24, 0x01	; 1
		break;
 600:	08 95       	ret

		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
 602:	80 b3       	in	r24, 0x10	; 16
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_GetPinValue+0x50>
 608:	95 95       	asr	r25
 60a:	87 95       	ror	r24
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_GetPinValue+0x4c>
 610:	81 70       	andi	r24, 0x01	; 1
		break;
 612:	08 95       	ret
		break;
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
 614:	80 e0       	ldi	r24, 0x00	; 0
		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
		break;
	}
	return value ; 
}
 616:	08 95       	ret

00000618 <pwm_init>:
pwm mode	>> NON_INVERTING_MODE , INVERTING_MODE
prescalar	>> 0 , 8 , 64 , 256 , 1024
*/

void pwm_init (uint8 ID , uint8 mode , uint16 prescalar) {
	if (ID == PWM1) {
 618:	81 11       	cpse	r24, r1
 61a:	56 c0       	rjmp	.+172    	; 0x6c8 <pwm_init+0xb0>
		PORTB_DIR |= (1<<3) ;
 61c:	87 b3       	in	r24, 0x17	; 23
 61e:	88 60       	ori	r24, 0x08	; 8
 620:	87 bb       	out	0x17, r24	; 23
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
 622:	61 11       	cpse	r22, r1
 624:	27 c0       	rjmp	.+78     	; 0x674 <pwm_init+0x5c>
			switch (prescalar) {
 626:	40 34       	cpi	r20, 0x40	; 64
 628:	51 05       	cpc	r21, r1
 62a:	c1 f0       	breq	.+48     	; 0x65c <pwm_init+0x44>
 62c:	38 f4       	brcc	.+14     	; 0x63c <pwm_init+0x24>
 62e:	41 15       	cp	r20, r1
 630:	51 05       	cpc	r21, r1
 632:	61 f0       	breq	.+24     	; 0x64c <pwm_init+0x34>
 634:	48 30       	cpi	r20, 0x08	; 8
 636:	51 05       	cpc	r21, r1
 638:	69 f0       	breq	.+26     	; 0x654 <pwm_init+0x3c>
 63a:	08 95       	ret
 63c:	41 15       	cp	r20, r1
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	58 07       	cpc	r21, r24
 642:	81 f0       	breq	.+32     	; 0x664 <pwm_init+0x4c>
 644:	41 15       	cp	r20, r1
 646:	54 40       	sbci	r21, 0x04	; 4
 648:	89 f0       	breq	.+34     	; 0x66c <pwm_init+0x54>
 64a:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x69 ;
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	89 66       	ori	r24, 0x69	; 105
 650:	83 bf       	out	0x33, r24	; 51
					break ;
 652:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x6A ;
 654:	83 b7       	in	r24, 0x33	; 51
 656:	8a 66       	ori	r24, 0x6A	; 106
 658:	83 bf       	out	0x33, r24	; 51
					break ;
 65a:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x6B ;
 65c:	83 b7       	in	r24, 0x33	; 51
 65e:	8b 66       	ori	r24, 0x6B	; 107
 660:	83 bf       	out	0x33, r24	; 51
					break ;
 662:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x6C ;
 664:	83 b7       	in	r24, 0x33	; 51
 666:	8c 66       	ori	r24, 0x6C	; 108
 668:	83 bf       	out	0x33, r24	; 51
					break ;
 66a:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x6D ;
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	8d 66       	ori	r24, 0x6D	; 109
 670:	83 bf       	out	0x33, r24	; 51
					break ;
 672:	08 95       	ret
				}
			}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
 674:	61 30       	cpi	r22, 0x01	; 1
 676:	09 f0       	breq	.+2      	; 0x67a <pwm_init+0x62>
 678:	7e c0       	rjmp	.+252    	; 0x776 <pwm_init+0x15e>
			switch (prescalar) {
 67a:	40 34       	cpi	r20, 0x40	; 64
 67c:	51 05       	cpc	r21, r1
 67e:	c1 f0       	breq	.+48     	; 0x6b0 <pwm_init+0x98>
 680:	38 f4       	brcc	.+14     	; 0x690 <pwm_init+0x78>
 682:	41 15       	cp	r20, r1
 684:	51 05       	cpc	r21, r1
 686:	61 f0       	breq	.+24     	; 0x6a0 <pwm_init+0x88>
 688:	48 30       	cpi	r20, 0x08	; 8
 68a:	51 05       	cpc	r21, r1
 68c:	69 f0       	breq	.+26     	; 0x6a8 <pwm_init+0x90>
 68e:	08 95       	ret
 690:	41 15       	cp	r20, r1
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	58 07       	cpc	r21, r24
 696:	81 f0       	breq	.+32     	; 0x6b8 <pwm_init+0xa0>
 698:	41 15       	cp	r20, r1
 69a:	54 40       	sbci	r21, 0x04	; 4
 69c:	89 f0       	breq	.+34     	; 0x6c0 <pwm_init+0xa8>
 69e:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x79 ;
 6a0:	83 b7       	in	r24, 0x33	; 51
 6a2:	89 67       	ori	r24, 0x79	; 121
 6a4:	83 bf       	out	0x33, r24	; 51
					break ;
 6a6:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x7A ;
 6a8:	83 b7       	in	r24, 0x33	; 51
 6aa:	8a 67       	ori	r24, 0x7A	; 122
 6ac:	83 bf       	out	0x33, r24	; 51
					break ;
 6ae:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x7B ;
 6b0:	83 b7       	in	r24, 0x33	; 51
 6b2:	8b 67       	ori	r24, 0x7B	; 123
 6b4:	83 bf       	out	0x33, r24	; 51
					break ;
 6b6:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x7C ;
 6b8:	83 b7       	in	r24, 0x33	; 51
 6ba:	8c 67       	ori	r24, 0x7C	; 124
 6bc:	83 bf       	out	0x33, r24	; 51
					break ;
 6be:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x7D ;
 6c0:	83 b7       	in	r24, 0x33	; 51
 6c2:	8d 67       	ori	r24, 0x7D	; 125
 6c4:	83 bf       	out	0x33, r24	; 51
					break ;
 6c6:	08 95       	ret
				}
			}
	}
	else if (ID == PWM2) {
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	09 f0       	breq	.+2      	; 0x6ce <pwm_init+0xb6>
 6cc:	54 c0       	rjmp	.+168    	; 0x776 <pwm_init+0x15e>
		 PORTD_DIR |= ( 1<< 7 ) ;
 6ce:	81 b3       	in	r24, 0x11	; 17
 6d0:	80 68       	ori	r24, 0x80	; 128
 6d2:	81 bb       	out	0x11, r24	; 17
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
 6d4:	61 11       	cpse	r22, r1
 6d6:	27 c0       	rjmp	.+78     	; 0x726 <pwm_init+0x10e>
			switch (prescalar) {
 6d8:	40 34       	cpi	r20, 0x40	; 64
 6da:	51 05       	cpc	r21, r1
 6dc:	c1 f0       	breq	.+48     	; 0x70e <pwm_init+0xf6>
 6de:	38 f4       	brcc	.+14     	; 0x6ee <pwm_init+0xd6>
 6e0:	41 15       	cp	r20, r1
 6e2:	51 05       	cpc	r21, r1
 6e4:	61 f0       	breq	.+24     	; 0x6fe <pwm_init+0xe6>
 6e6:	48 30       	cpi	r20, 0x08	; 8
 6e8:	51 05       	cpc	r21, r1
 6ea:	69 f0       	breq	.+26     	; 0x706 <pwm_init+0xee>
 6ec:	08 95       	ret
 6ee:	41 15       	cp	r20, r1
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	58 07       	cpc	r21, r24
 6f4:	81 f0       	breq	.+32     	; 0x716 <pwm_init+0xfe>
 6f6:	41 15       	cp	r20, r1
 6f8:	54 40       	sbci	r21, 0x04	; 4
 6fa:	89 f0       	breq	.+34     	; 0x71e <pwm_init+0x106>
 6fc:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x69 ;
 6fe:	85 b5       	in	r24, 0x25	; 37
 700:	89 66       	ori	r24, 0x69	; 105
 702:	85 bd       	out	0x25, r24	; 37
					break ;
 704:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x6A ;
 706:	85 b5       	in	r24, 0x25	; 37
 708:	8a 66       	ori	r24, 0x6A	; 106
 70a:	85 bd       	out	0x25, r24	; 37
					break ;
 70c:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x6B ;
 70e:	85 b5       	in	r24, 0x25	; 37
 710:	8b 66       	ori	r24, 0x6B	; 107
 712:	85 bd       	out	0x25, r24	; 37
					break ;
 714:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x6C ;
 716:	85 b5       	in	r24, 0x25	; 37
 718:	8c 66       	ori	r24, 0x6C	; 108
 71a:	85 bd       	out	0x25, r24	; 37
					break ;
 71c:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x6D ;
 71e:	85 b5       	in	r24, 0x25	; 37
 720:	8d 66       	ori	r24, 0x6D	; 109
 722:	85 bd       	out	0x25, r24	; 37
					break ;
 724:	08 95       	ret
			}
		}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
 726:	61 30       	cpi	r22, 0x01	; 1
 728:	31 f5       	brne	.+76     	; 0x776 <pwm_init+0x15e>
			switch (prescalar) {
 72a:	40 34       	cpi	r20, 0x40	; 64
 72c:	51 05       	cpc	r21, r1
 72e:	c1 f0       	breq	.+48     	; 0x760 <pwm_init+0x148>
 730:	38 f4       	brcc	.+14     	; 0x740 <pwm_init+0x128>
 732:	41 15       	cp	r20, r1
 734:	51 05       	cpc	r21, r1
 736:	61 f0       	breq	.+24     	; 0x750 <pwm_init+0x138>
 738:	48 30       	cpi	r20, 0x08	; 8
 73a:	51 05       	cpc	r21, r1
 73c:	69 f0       	breq	.+26     	; 0x758 <pwm_init+0x140>
 73e:	08 95       	ret
 740:	41 15       	cp	r20, r1
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	58 07       	cpc	r21, r24
 746:	81 f0       	breq	.+32     	; 0x768 <pwm_init+0x150>
 748:	41 15       	cp	r20, r1
 74a:	54 40       	sbci	r21, 0x04	; 4
 74c:	89 f0       	breq	.+34     	; 0x770 <pwm_init+0x158>
 74e:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x79 ;
 750:	85 b5       	in	r24, 0x25	; 37
 752:	89 67       	ori	r24, 0x79	; 121
 754:	85 bd       	out	0x25, r24	; 37
					break ;
 756:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x7A ;
 758:	85 b5       	in	r24, 0x25	; 37
 75a:	8a 67       	ori	r24, 0x7A	; 122
 75c:	85 bd       	out	0x25, r24	; 37
					break ;
 75e:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x7B ;
 760:	85 b5       	in	r24, 0x25	; 37
 762:	8b 67       	ori	r24, 0x7B	; 123
 764:	85 bd       	out	0x25, r24	; 37
					break ;
 766:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x7C ;
 768:	85 b5       	in	r24, 0x25	; 37
 76a:	8c 67       	ori	r24, 0x7C	; 124
 76c:	85 bd       	out	0x25, r24	; 37
					break ;
 76e:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x7D ;
 770:	85 b5       	in	r24, 0x25	; 37
 772:	8d 67       	ori	r24, 0x7D	; 125
 774:	85 bd       	out	0x25, r24	; 37
 776:	08 95       	ret

00000778 <pwm_SetSpeed>:
					break ;
			}
		}
	}
}
void pwm_SetSpeed (uint8 ID ,uint8 percentage) {
 778:	28 2f       	mov	r18, r24
	uint8 duty_cycle = 255 * percentage / 100 ; 
 77a:	3f ef       	ldi	r19, 0xFF	; 255
 77c:	63 9f       	mul	r22, r19
 77e:	c0 01       	movw	r24, r0
 780:	11 24       	eor	r1, r1
 782:	64 e6       	ldi	r22, 0x64	; 100
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	0e 94 cd 03 	call	0x79a	; 0x79a <__divmodhi4>
	if (ID == PWM1) {
 78a:	21 11       	cpse	r18, r1
 78c:	02 c0       	rjmp	.+4      	; 0x792 <pwm_SetSpeed+0x1a>
		T0_OutCmp_REG = duty_cycle ; 
 78e:	6c bf       	out	0x3c, r22	; 60
 790:	08 95       	ret
	}
	else if (ID == PWM2) {
 792:	21 30       	cpi	r18, 0x01	; 1
 794:	09 f4       	brne	.+2      	; 0x798 <pwm_SetSpeed+0x20>
		T2_OutCmp_REG = duty_cycle ;
 796:	63 bd       	out	0x23, r22	; 35
 798:	08 95       	ret

0000079a <__divmodhi4>:
 79a:	97 fb       	bst	r25, 7
 79c:	07 2e       	mov	r0, r23
 79e:	16 f4       	brtc	.+4      	; 0x7a4 <__divmodhi4+0xa>
 7a0:	00 94       	com	r0
 7a2:	07 d0       	rcall	.+14     	; 0x7b2 <__divmodhi4_neg1>
 7a4:	77 fd       	sbrc	r23, 7
 7a6:	09 d0       	rcall	.+18     	; 0x7ba <__divmodhi4_neg2>
 7a8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__udivmodhi4>
 7ac:	07 fc       	sbrc	r0, 7
 7ae:	05 d0       	rcall	.+10     	; 0x7ba <__divmodhi4_neg2>
 7b0:	3e f4       	brtc	.+14     	; 0x7c0 <__divmodhi4_exit>

000007b2 <__divmodhi4_neg1>:
 7b2:	90 95       	com	r25
 7b4:	81 95       	neg	r24
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <__divmodhi4_neg2>:
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255

000007c0 <__divmodhi4_exit>:
 7c0:	08 95       	ret

000007c2 <__udivmodhi4>:
 7c2:	aa 1b       	sub	r26, r26
 7c4:	bb 1b       	sub	r27, r27
 7c6:	51 e1       	ldi	r21, 0x11	; 17
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <__udivmodhi4_ep>

000007ca <__udivmodhi4_loop>:
 7ca:	aa 1f       	adc	r26, r26
 7cc:	bb 1f       	adc	r27, r27
 7ce:	a6 17       	cp	r26, r22
 7d0:	b7 07       	cpc	r27, r23
 7d2:	10 f0       	brcs	.+4      	; 0x7d8 <__udivmodhi4_ep>
 7d4:	a6 1b       	sub	r26, r22
 7d6:	b7 0b       	sbc	r27, r23

000007d8 <__udivmodhi4_ep>:
 7d8:	88 1f       	adc	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	5a 95       	dec	r21
 7de:	a9 f7       	brne	.-22     	; 0x7ca <__udivmodhi4_loop>
 7e0:	80 95       	com	r24
 7e2:	90 95       	com	r25
 7e4:	bc 01       	movw	r22, r24
 7e6:	cd 01       	movw	r24, r26
 7e8:	08 95       	ret

000007ea <_exit>:
 7ea:	f8 94       	cli

000007ec <__stop_program>:
 7ec:	ff cf       	rjmp	.-2      	; 0x7ec <__stop_program>
