
CarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006a  0080006a  00000726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110a  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000951  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d2  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f6  00000000  00000000  000034f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003de8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  8a:	0c 94 42 03 	jmp	0x684	; 0x684 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <car_init>:

void car_moveBackward(void)
{
	/* move the 2 motors backward at the same speed 30 */
	Motor_moveBackwards(MOTOR_1_config,30);
	Motor_moveBackwards(MOTOR_2_config,30);
  92:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <MOTOR_1_config>
  96:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <MOTOR_1_config+0x1>
  9a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <MOTOR_1_config+0x2>
  9e:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <MOTOR_1_config+0x3>
  a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <MOTOR_1_config+0x4>
  a6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Motor_init>
  aa:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  b6:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
  be:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Motor_init>
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 9f 00 	call	0x13e	; 0x13e <Button_init>
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 9f 00 	call	0x13e	; 0x13e <Button_init>
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 9f 00 	call	0x13e	; 0x13e <Button_init>
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 9f 00 	call	0x13e	; 0x13e <Button_init>
  e2:	08 95       	ret

000000e4 <car_moveForward>:
  e4:	cf 93       	push	r28
  e6:	c8 2f       	mov	r28, r24
  e8:	28 2f       	mov	r18, r24
  ea:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <MOTOR_1_config>
  ee:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <MOTOR_1_config+0x1>
  f2:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <MOTOR_1_config+0x2>
  f6:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <MOTOR_1_config+0x3>
  fa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <MOTOR_1_config+0x4>
  fe:	0e 94 16 01 	call	0x22c	; 0x22c <Motor_moveForward>
 102:	2c 2f       	mov	r18, r28
 104:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 110:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 114:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 118:	0e 94 16 01 	call	0x22c	; 0x22c <Motor_moveForward>
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <car_updateState>:

void car_updateState(void)
{
	static uint8 speed = 0;
	
	if (Button_read_one_press(BUTTON_G,PULLUP_RES) == HIGH){
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Button_read_one_press>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	39 f4       	brne	.+14     	; 0x13c <car_updateState+0x1c>
		speed +=10;
 12e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 132:	86 5f       	subi	r24, 0xF6	; 246
 134:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		car_moveForward(speed);
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <car_moveForward>
 13c:	08 95       	ret

0000013e <Button_init>:
 *	void return.
 *	Expected Output: PIN of the button is set as input.
 */
void Button_init(uint8 port,uint8 pin)
{
	if (pin <= 7)
 13e:	68 30       	cpi	r22, 0x08	; 8
 140:	18 f4       	brcc	.+6      	; 0x148 <Button_init+0xa>
		DIO_SetPinDirection(port,pin,INPUT);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinDirection>
 148:	08 95       	ret

0000014a <Button_read>:
	uint8 current_state =  0;
	static uint8 last_state = 0;
	static uint16 counter = 0;
	static uint8 return_state = 0;

	if (conn == PULLDOWN_RES){
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	19 f4       	brne	.+6      	; 0x154 <Button_read+0xa>
		current_state =DIO_GetPinValue(port,pin);
 14e:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_GetPinValue>
 152:	06 c0       	rjmp	.+12     	; 0x160 <Button_read+0x16>
	}
	else{
		current_state =!DIO_GetPinValue(port,pin);
 154:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_GetPinValue>
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	81 11       	cpse	r24, r1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	89 2f       	mov	r24, r25
	}

	if (current_state == last_state){
 160:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <last_state.1621>
 164:	89 13       	cpse	r24, r25
 166:	0a c0       	rjmp	.+20     	; 0x17c <Button_read+0x32>
		counter++;
 168:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <counter.1622>
 16c:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <counter.1622+0x1>
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <counter.1622+0x1>
 178:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <counter.1622>
	}

	if (counter > DEBOUNCTING_TIME)
 17c:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <counter.1622>
 180:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <counter.1622+0x1>
 184:	29 3c       	cpi	r18, 0xC9	; 201
 186:	31 05       	cpc	r19, r1
 188:	30 f0       	brcs	.+12     	; 0x196 <Button_read+0x4c>
	{
		counter = 0;
 18a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <counter.1622+0x1>
 18e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <counter.1622>
		return_state = current_state;
 192:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <return_state.1623>
	}

	last_state = current_state;
 196:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <last_state.1621>

	return return_state;


}
 19a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <return_state.1623>
 19e:	08 95       	ret

000001a0 <Button_read_one_press>:
{
	static uint8 current_value =0;
	static uint8 last_value = 0;
	static uint8 return_value = 0;
	
	current_value = Button_read(port,pin,conn);
 1a0:	0e 94 a5 00 	call	0x14a	; 0x14a <Button_read>
	
	if (current_value!=last_value){
 1a4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <last_value.1630>
 1a8:	89 17       	cp	r24, r25
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <Button_read_one_press+0x12>
		return_value = current_value;					/*return pressed value */
 1ac:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <return_value.1631>
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <Button_read_one_press+0x18>
	}
	else return_value = 2;								/*return any other value*/
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <return_value.1631>
	
	last_value = current_value;							/*update variables*/
 1b8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <last_value.1630>
	
	return return_value;
}
 1bc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <return_value.1631>
 1c0:	08 95       	ret

000001c2 <Motor_init>:
 * Expected OUTPUT: Setting Pins of PWM and Direction as output.
					Initializing PWM.
 */

void Motor_init(ST_MOTORconfig_t config)
{
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <Motor_init+0x8>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <Motor_init+0xa>
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	49 83       	std	Y+1, r20	; 0x01
 1d4:	5a 83       	std	Y+2, r21	; 0x02
 1d6:	6b 83       	std	Y+3, r22	; 0x03
 1d8:	7c 83       	std	Y+4, r23	; 0x04
	if(config.PWM_ID == PWM1)
 1da:	18 2f       	mov	r17, r24
 1dc:	81 11       	cpse	r24, r1
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <Motor_init+0x2a>
		pwm_init(PWM1,NON_INVERTING_MODE,PRESCALAR);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <pwm_init>
		
	if(config.PWM_ID == PWM2)
 1ec:	11 30       	cpi	r17, 0x01	; 1
 1ee:	31 f4       	brne	.+12     	; 0x1fc <Motor_init+0x3a>
		pwm_init(PWM2,NON_INVERTING_MODE,PRESCALAR);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <pwm_init>
			
	if (config.DIR1_PIN <= 7 && config.DIR2_PIN <= 7 ){
 1fc:	6a 81       	ldd	r22, Y+2	; 0x02
 1fe:	68 30       	cpi	r22, 0x08	; 8
 200:	60 f4       	brcc	.+24     	; 0x21a <Motor_init+0x58>
 202:	1c 81       	ldd	r17, Y+4	; 0x04
 204:	18 30       	cpi	r17, 0x08	; 8
 206:	48 f4       	brcc	.+18     	; 0x21a <Motor_init+0x58>
		DIO_SetPinDirection(config.DIR1_PORT,config.DIR1_PIN,OUTPUT);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinDirection>
		DIO_SetPinDirection(config.DIR2_PORT,config.DIR2_PIN,OUTPUT);
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	61 2f       	mov	r22, r17
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinDirection>

	}

	
}
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	08 95       	ret

0000022c <Motor_moveForward>:
 *	Inputs ST_MOTORconfig_t motor ID config , uint8_t speed percentage from 0 to 100
 *	void return. 
 *	Expected output: Motor rotate clockwise if inputs are valid 
 */
void Motor_moveForward(ST_MOTORconfig_t config,uint8 speed)
{
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	00 d0       	rcall	.+0      	; 0x234 <Motor_moveForward+0x8>
 234:	00 d0       	rcall	.+0      	; 0x236 <Motor_moveForward+0xa>
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	94 2f       	mov	r25, r20
 23e:	6b 83       	std	Y+3, r22	; 0x03
 240:	7c 83       	std	Y+4, r23	; 0x04
 242:	8d 83       	std	Y+5, r24	; 0x05
 244:	12 2f       	mov	r17, r18
	DIO_SetPinValue(config.DIR1_PORT,config.DIR1_PIN,LOW);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	65 2f       	mov	r22, r21
 24a:	89 2f       	mov	r24, r25
 24c:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinValue>
	DIO_SetPinValue(config.DIR2_PORT,config.DIR2_PIN,HIGH);
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	6c 81       	ldd	r22, Y+4	; 0x04
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	0e 94 b6 01 	call	0x36c	; 0x36c <DIO_SetPinValue>

	if (speed>=0 && speed <=100)
 25a:	15 36       	cpi	r17, 0x65	; 101
 25c:	20 f4       	brcc	.+8      	; 0x266 <Motor_moveForward+0x3a>
		pwm_SetSpeed(config.PWM_ID,speed);
 25e:	61 2f       	mov	r22, r17
 260:	8d 81       	ldd	r24, Y+5	; 0x05
 262:	0e 94 09 03 	call	0x612	; 0x612 <pwm_SetSpeed>
}
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	08 95       	ret

00000278 <main>:
	ST_MOTORconfig_t motor2 = {portA,2,portA,3,PWM2};
		
	Motor_init(motor1);
	Motor_init(motor2);
	*/
	car_init();
 278:	0e 94 49 00 	call	0x92	; 0x92 <car_init>
    /* Replace with your application code */
    while (1) 
    {
		car_updateState();
 27c:	0e 94 90 00 	call	0x120	; 0x120 <car_updateState>
 280:	fd cf       	rjmp	.-6      	; 0x27c <main+0x4>

00000282 <DIO_SetPinDirection>:
		case portC :
			PORTC_REG = Value ; 
		break;
		
		case portD :
			PORTD_REG = Value ; 
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	11 f1       	breq	.+68     	; 0x2ca <DIO_SetPinDirection+0x48>
 286:	30 f0       	brcs	.+12     	; 0x294 <DIO_SetPinDirection+0x12>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	d1 f1       	breq	.+116    	; 0x300 <DIO_SetPinDirection+0x7e>
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	09 f4       	brne	.+2      	; 0x292 <DIO_SetPinDirection+0x10>
 290:	52 c0       	rjmp	.+164    	; 0x336 <DIO_SetPinDirection+0xb4>
 292:	08 95       	ret
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	59 f4       	brne	.+22     	; 0x2ae <DIO_SetPinDirection+0x2c>
 298:	2a b3       	in	r18, 0x1a	; 26
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPinDirection+0x22>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPinDirection+0x1e>
 2a8:	82 2b       	or	r24, r18
 2aa:	8a bb       	out	0x1a, r24	; 26
 2ac:	08 95       	ret
 2ae:	41 11       	cpse	r20, r1
 2b0:	5c c0       	rjmp	.+184    	; 0x36a <DIO_SetPinDirection+0xe8>
 2b2:	2a b3       	in	r18, 0x1a	; 26
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_SetPinDirection+0x3c>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_SetPinDirection+0x38>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	8a bb       	out	0x1a, r24	; 26
 2c8:	08 95       	ret
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	59 f4       	brne	.+22     	; 0x2e4 <DIO_SetPinDirection+0x62>
 2ce:	27 b3       	in	r18, 0x17	; 23
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_SetPinDirection+0x58>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_SetPinDirection+0x54>
 2de:	82 2b       	or	r24, r18
 2e0:	87 bb       	out	0x17, r24	; 23
 2e2:	08 95       	ret
 2e4:	41 11       	cpse	r20, r1
 2e6:	41 c0       	rjmp	.+130    	; 0x36a <DIO_SetPinDirection+0xe8>
 2e8:	27 b3       	in	r18, 0x17	; 23
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_SetPinDirection+0x72>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_SetPinDirection+0x6e>
 2f8:	80 95       	com	r24
 2fa:	82 23       	and	r24, r18
 2fc:	87 bb       	out	0x17, r24	; 23
 2fe:	08 95       	ret
 300:	41 30       	cpi	r20, 0x01	; 1
 302:	59 f4       	brne	.+22     	; 0x31a <DIO_SetPinDirection+0x98>
 304:	24 b3       	in	r18, 0x14	; 20
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinDirection+0x8e>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinDirection+0x8a>
 314:	82 2b       	or	r24, r18
 316:	84 bb       	out	0x14, r24	; 20
 318:	08 95       	ret
 31a:	41 11       	cpse	r20, r1
 31c:	26 c0       	rjmp	.+76     	; 0x36a <DIO_SetPinDirection+0xe8>
 31e:	24 b3       	in	r18, 0x14	; 20
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_SetPinDirection+0xa8>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_SetPinDirection+0xa4>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	84 bb       	out	0x14, r24	; 20
 334:	08 95       	ret
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	59 f4       	brne	.+22     	; 0x350 <DIO_SetPinDirection+0xce>
 33a:	21 b3       	in	r18, 0x11	; 17
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinDirection+0xc4>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinDirection+0xc0>
 34a:	82 2b       	or	r24, r18
 34c:	81 bb       	out	0x11, r24	; 17
 34e:	08 95       	ret
 350:	41 11       	cpse	r20, r1
 352:	0b c0       	rjmp	.+22     	; 0x36a <DIO_SetPinDirection+0xe8>
 354:	21 b3       	in	r18, 0x11	; 17
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_SetPinDirection+0xde>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_SetPinDirection+0xda>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	81 bb       	out	0x11, r24	; 17
 36a:	08 95       	ret

0000036c <DIO_SetPinValue>:
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	11 f1       	breq	.+68     	; 0x3b4 <DIO_SetPinValue+0x48>
 370:	30 f0       	brcs	.+12     	; 0x37e <DIO_SetPinValue+0x12>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	d1 f1       	breq	.+116    	; 0x3ea <DIO_SetPinValue+0x7e>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	09 f4       	brne	.+2      	; 0x37c <DIO_SetPinValue+0x10>
 37a:	52 c0       	rjmp	.+164    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 37c:	08 95       	ret
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	59 f4       	brne	.+22     	; 0x398 <DIO_SetPinValue+0x2c>
 382:	2b b3       	in	r18, 0x1b	; 27
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_SetPinValue+0x22>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_SetPinValue+0x1e>
 392:	82 2b       	or	r24, r18
 394:	8b bb       	out	0x1b, r24	; 27
 396:	08 95       	ret
 398:	41 11       	cpse	r20, r1
 39a:	5c c0       	rjmp	.+184    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 39c:	2b b3       	in	r18, 0x1b	; 27
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_SetPinValue+0x3c>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_SetPinValue+0x38>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	8b bb       	out	0x1b, r24	; 27
 3b2:	08 95       	ret
 3b4:	41 30       	cpi	r20, 0x01	; 1
 3b6:	59 f4       	brne	.+22     	; 0x3ce <DIO_SetPinValue+0x62>
 3b8:	28 b3       	in	r18, 0x18	; 24
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_SetPinValue+0x58>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_SetPinValue+0x54>
 3c8:	82 2b       	or	r24, r18
 3ca:	88 bb       	out	0x18, r24	; 24
 3cc:	08 95       	ret
 3ce:	41 11       	cpse	r20, r1
 3d0:	41 c0       	rjmp	.+130    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3d2:	28 b3       	in	r18, 0x18	; 24
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_SetPinValue+0x72>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_SetPinValue+0x6e>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	88 bb       	out	0x18, r24	; 24
 3e8:	08 95       	ret
 3ea:	41 30       	cpi	r20, 0x01	; 1
 3ec:	59 f4       	brne	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ee:	25 b3       	in	r18, 0x15	; 21
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_SetPinValue+0x8e>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_SetPinValue+0x8a>
 3fe:	82 2b       	or	r24, r18
 400:	85 bb       	out	0x15, r24	; 21
 402:	08 95       	ret
 404:	41 11       	cpse	r20, r1
 406:	26 c0       	rjmp	.+76     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 408:	25 b3       	in	r18, 0x15	; 21
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	82 23       	and	r24, r18
 41c:	85 bb       	out	0x15, r24	; 21
 41e:	08 95       	ret
 420:	41 30       	cpi	r20, 0x01	; 1
 422:	59 f4       	brne	.+22     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 424:	22 b3       	in	r18, 0x12	; 18
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	82 2b       	or	r24, r18
 436:	82 bb       	out	0x12, r24	; 18
 438:	08 95       	ret
 43a:	41 11       	cpse	r20, r1
 43c:	0b c0       	rjmp	.+22     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43e:	22 b3       	in	r18, 0x12	; 18
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	82 23       	and	r24, r18
 452:	82 bb       	out	0x12, r24	; 18
 454:	08 95       	ret

00000456 <DIO_GetPinValue>:
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
	switch (PortNumber) {
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	79 f0       	breq	.+30     	; 0x478 <DIO_GetPinValue+0x22>
 45a:	28 f0       	brcs	.+10     	; 0x466 <DIO_GetPinValue+0x10>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	a9 f0       	breq	.+42     	; 0x48a <DIO_GetPinValue+0x34>
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	e1 f0       	breq	.+56     	; 0x49c <DIO_GetPinValue+0x46>
 464:	24 c0       	rjmp	.+72     	; 0x4ae <DIO_GetPinValue+0x58>
		case portA : 
			value = (PINA_REG >> PinNumber) & 0x01 ; 	
 466:	89 b3       	in	r24, 0x19	; 25
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_GetPinValue+0x1a>
 46c:	95 95       	asr	r25
 46e:	87 95       	ror	r24
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_GetPinValue+0x16>
 474:	81 70       	andi	r24, 0x01	; 1
		break;
 476:	08 95       	ret
		
		case portB :
			value = (PINB_REG >> PinNumber) & 0x01 ;
 478:	86 b3       	in	r24, 0x16	; 22
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_GetPinValue+0x2c>
 47e:	95 95       	asr	r25
 480:	87 95       	ror	r24
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_GetPinValue+0x28>
 486:	81 70       	andi	r24, 0x01	; 1
		break;
 488:	08 95       	ret
		
		case portC :
			value = (PINC_REG >> PinNumber) & 0x01 ;
 48a:	83 b3       	in	r24, 0x13	; 19
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_GetPinValue+0x3e>
 490:	95 95       	asr	r25
 492:	87 95       	ror	r24
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_GetPinValue+0x3a>
 498:	81 70       	andi	r24, 0x01	; 1
		break;
 49a:	08 95       	ret

		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
 49c:	80 b3       	in	r24, 0x10	; 16
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_GetPinValue+0x50>
 4a2:	95 95       	asr	r25
 4a4:	87 95       	ror	r24
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_GetPinValue+0x4c>
 4aa:	81 70       	andi	r24, 0x01	; 1
		break;
 4ac:	08 95       	ret
		break;
	}	
}

uint8 DIO_GetPinValue (uint8 PortNumber , uint8 PinNumber) {
	uint8 value = 0 ; 
 4ae:	80 e0       	ldi	r24, 0x00	; 0
		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
		break;
	}
	return value ; 
}
 4b0:	08 95       	ret

000004b2 <pwm_init>:
pwm mode	>> NON_INVERTING_MODE , INVERTING_MODE
prescalar	>> 0 , 8 , 64 , 256 , 1024
*/

void pwm_init (uint8 ID , uint8 mode , uint16 prescalar) {
	if (ID == PWM1) {
 4b2:	81 11       	cpse	r24, r1
 4b4:	56 c0       	rjmp	.+172    	; 0x562 <pwm_init+0xb0>
		PORTB_DIR |= (1<<3) ;
 4b6:	87 b3       	in	r24, 0x17	; 23
 4b8:	88 60       	ori	r24, 0x08	; 8
 4ba:	87 bb       	out	0x17, r24	; 23
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
 4bc:	61 11       	cpse	r22, r1
 4be:	27 c0       	rjmp	.+78     	; 0x50e <pwm_init+0x5c>
			switch (prescalar) {
 4c0:	40 34       	cpi	r20, 0x40	; 64
 4c2:	51 05       	cpc	r21, r1
 4c4:	c1 f0       	breq	.+48     	; 0x4f6 <pwm_init+0x44>
 4c6:	38 f4       	brcc	.+14     	; 0x4d6 <pwm_init+0x24>
 4c8:	41 15       	cp	r20, r1
 4ca:	51 05       	cpc	r21, r1
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <pwm_init+0x34>
 4ce:	48 30       	cpi	r20, 0x08	; 8
 4d0:	51 05       	cpc	r21, r1
 4d2:	69 f0       	breq	.+26     	; 0x4ee <pwm_init+0x3c>
 4d4:	08 95       	ret
 4d6:	41 15       	cp	r20, r1
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	58 07       	cpc	r21, r24
 4dc:	81 f0       	breq	.+32     	; 0x4fe <pwm_init+0x4c>
 4de:	41 15       	cp	r20, r1
 4e0:	54 40       	sbci	r21, 0x04	; 4
 4e2:	89 f0       	breq	.+34     	; 0x506 <pwm_init+0x54>
 4e4:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x69 ;
 4e6:	83 b7       	in	r24, 0x33	; 51
 4e8:	89 66       	ori	r24, 0x69	; 105
 4ea:	83 bf       	out	0x33, r24	; 51
					break ;
 4ec:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x6A ;
 4ee:	83 b7       	in	r24, 0x33	; 51
 4f0:	8a 66       	ori	r24, 0x6A	; 106
 4f2:	83 bf       	out	0x33, r24	; 51
					break ;
 4f4:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x6B ;
 4f6:	83 b7       	in	r24, 0x33	; 51
 4f8:	8b 66       	ori	r24, 0x6B	; 107
 4fa:	83 bf       	out	0x33, r24	; 51
					break ;
 4fc:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x6C ;
 4fe:	83 b7       	in	r24, 0x33	; 51
 500:	8c 66       	ori	r24, 0x6C	; 108
 502:	83 bf       	out	0x33, r24	; 51
					break ;
 504:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x6D ;
 506:	83 b7       	in	r24, 0x33	; 51
 508:	8d 66       	ori	r24, 0x6D	; 109
 50a:	83 bf       	out	0x33, r24	; 51
					break ;
 50c:	08 95       	ret
				}
			}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
 50e:	61 30       	cpi	r22, 0x01	; 1
 510:	09 f0       	breq	.+2      	; 0x514 <pwm_init+0x62>
 512:	7e c0       	rjmp	.+252    	; 0x610 <pwm_init+0x15e>
			switch (prescalar) {
 514:	40 34       	cpi	r20, 0x40	; 64
 516:	51 05       	cpc	r21, r1
 518:	c1 f0       	breq	.+48     	; 0x54a <pwm_init+0x98>
 51a:	38 f4       	brcc	.+14     	; 0x52a <pwm_init+0x78>
 51c:	41 15       	cp	r20, r1
 51e:	51 05       	cpc	r21, r1
 520:	61 f0       	breq	.+24     	; 0x53a <pwm_init+0x88>
 522:	48 30       	cpi	r20, 0x08	; 8
 524:	51 05       	cpc	r21, r1
 526:	69 f0       	breq	.+26     	; 0x542 <pwm_init+0x90>
 528:	08 95       	ret
 52a:	41 15       	cp	r20, r1
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	58 07       	cpc	r21, r24
 530:	81 f0       	breq	.+32     	; 0x552 <pwm_init+0xa0>
 532:	41 15       	cp	r20, r1
 534:	54 40       	sbci	r21, 0x04	; 4
 536:	89 f0       	breq	.+34     	; 0x55a <pwm_init+0xa8>
 538:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x79 ;
 53a:	83 b7       	in	r24, 0x33	; 51
 53c:	89 67       	ori	r24, 0x79	; 121
 53e:	83 bf       	out	0x33, r24	; 51
					break ;
 540:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x7A ;
 542:	83 b7       	in	r24, 0x33	; 51
 544:	8a 67       	ori	r24, 0x7A	; 122
 546:	83 bf       	out	0x33, r24	; 51
					break ;
 548:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x7B ;
 54a:	83 b7       	in	r24, 0x33	; 51
 54c:	8b 67       	ori	r24, 0x7B	; 123
 54e:	83 bf       	out	0x33, r24	; 51
					break ;
 550:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x7C ;
 552:	83 b7       	in	r24, 0x33	; 51
 554:	8c 67       	ori	r24, 0x7C	; 124
 556:	83 bf       	out	0x33, r24	; 51
					break ;
 558:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x7D ;
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	8d 67       	ori	r24, 0x7D	; 125
 55e:	83 bf       	out	0x33, r24	; 51
					break ;
 560:	08 95       	ret
				}
			}
	}
	else if (ID == PWM2) {
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	09 f0       	breq	.+2      	; 0x568 <pwm_init+0xb6>
 566:	54 c0       	rjmp	.+168    	; 0x610 <pwm_init+0x15e>
		 PORTD_DIR |= ( 1<< 7 ) ;
 568:	81 b3       	in	r24, 0x11	; 17
 56a:	80 68       	ori	r24, 0x80	; 128
 56c:	81 bb       	out	0x11, r24	; 17
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
 56e:	61 11       	cpse	r22, r1
 570:	27 c0       	rjmp	.+78     	; 0x5c0 <pwm_init+0x10e>
			switch (prescalar) {
 572:	40 34       	cpi	r20, 0x40	; 64
 574:	51 05       	cpc	r21, r1
 576:	c1 f0       	breq	.+48     	; 0x5a8 <pwm_init+0xf6>
 578:	38 f4       	brcc	.+14     	; 0x588 <pwm_init+0xd6>
 57a:	41 15       	cp	r20, r1
 57c:	51 05       	cpc	r21, r1
 57e:	61 f0       	breq	.+24     	; 0x598 <pwm_init+0xe6>
 580:	48 30       	cpi	r20, 0x08	; 8
 582:	51 05       	cpc	r21, r1
 584:	69 f0       	breq	.+26     	; 0x5a0 <pwm_init+0xee>
 586:	08 95       	ret
 588:	41 15       	cp	r20, r1
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	58 07       	cpc	r21, r24
 58e:	81 f0       	breq	.+32     	; 0x5b0 <pwm_init+0xfe>
 590:	41 15       	cp	r20, r1
 592:	54 40       	sbci	r21, 0x04	; 4
 594:	89 f0       	breq	.+34     	; 0x5b8 <pwm_init+0x106>
 596:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x69 ;
 598:	85 b5       	in	r24, 0x25	; 37
 59a:	89 66       	ori	r24, 0x69	; 105
 59c:	85 bd       	out	0x25, r24	; 37
					break ;
 59e:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x6A ;
 5a0:	85 b5       	in	r24, 0x25	; 37
 5a2:	8a 66       	ori	r24, 0x6A	; 106
 5a4:	85 bd       	out	0x25, r24	; 37
					break ;
 5a6:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x6B ;
 5a8:	85 b5       	in	r24, 0x25	; 37
 5aa:	8b 66       	ori	r24, 0x6B	; 107
 5ac:	85 bd       	out	0x25, r24	; 37
					break ;
 5ae:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x6C ;
 5b0:	85 b5       	in	r24, 0x25	; 37
 5b2:	8c 66       	ori	r24, 0x6C	; 108
 5b4:	85 bd       	out	0x25, r24	; 37
					break ;
 5b6:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x6D ;
 5b8:	85 b5       	in	r24, 0x25	; 37
 5ba:	8d 66       	ori	r24, 0x6D	; 109
 5bc:	85 bd       	out	0x25, r24	; 37
					break ;
 5be:	08 95       	ret
			}
		}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
 5c0:	61 30       	cpi	r22, 0x01	; 1
 5c2:	31 f5       	brne	.+76     	; 0x610 <pwm_init+0x15e>
			switch (prescalar) {
 5c4:	40 34       	cpi	r20, 0x40	; 64
 5c6:	51 05       	cpc	r21, r1
 5c8:	c1 f0       	breq	.+48     	; 0x5fa <pwm_init+0x148>
 5ca:	38 f4       	brcc	.+14     	; 0x5da <pwm_init+0x128>
 5cc:	41 15       	cp	r20, r1
 5ce:	51 05       	cpc	r21, r1
 5d0:	61 f0       	breq	.+24     	; 0x5ea <pwm_init+0x138>
 5d2:	48 30       	cpi	r20, 0x08	; 8
 5d4:	51 05       	cpc	r21, r1
 5d6:	69 f0       	breq	.+26     	; 0x5f2 <pwm_init+0x140>
 5d8:	08 95       	ret
 5da:	41 15       	cp	r20, r1
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	58 07       	cpc	r21, r24
 5e0:	81 f0       	breq	.+32     	; 0x602 <pwm_init+0x150>
 5e2:	41 15       	cp	r20, r1
 5e4:	54 40       	sbci	r21, 0x04	; 4
 5e6:	89 f0       	breq	.+34     	; 0x60a <pwm_init+0x158>
 5e8:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x79 ;
 5ea:	85 b5       	in	r24, 0x25	; 37
 5ec:	89 67       	ori	r24, 0x79	; 121
 5ee:	85 bd       	out	0x25, r24	; 37
					break ;
 5f0:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x7A ;
 5f2:	85 b5       	in	r24, 0x25	; 37
 5f4:	8a 67       	ori	r24, 0x7A	; 122
 5f6:	85 bd       	out	0x25, r24	; 37
					break ;
 5f8:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x7B ;
 5fa:	85 b5       	in	r24, 0x25	; 37
 5fc:	8b 67       	ori	r24, 0x7B	; 123
 5fe:	85 bd       	out	0x25, r24	; 37
					break ;
 600:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x7C ;
 602:	85 b5       	in	r24, 0x25	; 37
 604:	8c 67       	ori	r24, 0x7C	; 124
 606:	85 bd       	out	0x25, r24	; 37
					break ;
 608:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x7D ;
 60a:	85 b5       	in	r24, 0x25	; 37
 60c:	8d 67       	ori	r24, 0x7D	; 125
 60e:	85 bd       	out	0x25, r24	; 37
 610:	08 95       	ret

00000612 <pwm_SetSpeed>:
					break ;
			}
		}
	}
}
void pwm_SetSpeed (uint8 ID ,uint8 percentage) {
 612:	28 2f       	mov	r18, r24
	uint8 duty_cycle = 255 * percentage / 100 ; 
 614:	3f ef       	ldi	r19, 0xFF	; 255
 616:	63 9f       	mul	r22, r19
 618:	c0 01       	movw	r24, r0
 61a:	11 24       	eor	r1, r1
 61c:	64 e6       	ldi	r22, 0x64	; 100
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	0e 94 1a 03 	call	0x634	; 0x634 <__divmodhi4>
	if (ID == PWM1) {
 624:	21 11       	cpse	r18, r1
 626:	02 c0       	rjmp	.+4      	; 0x62c <pwm_SetSpeed+0x1a>
		T0_OutCmp_REG = duty_cycle ; 
 628:	6c bf       	out	0x3c, r22	; 60
 62a:	08 95       	ret
	}
	else if (ID == PWM2) {
 62c:	21 30       	cpi	r18, 0x01	; 1
 62e:	09 f4       	brne	.+2      	; 0x632 <pwm_SetSpeed+0x20>
		T2_OutCmp_REG = duty_cycle ;
 630:	63 bd       	out	0x23, r22	; 35
 632:	08 95       	ret

00000634 <__divmodhi4>:
 634:	97 fb       	bst	r25, 7
 636:	07 2e       	mov	r0, r23
 638:	16 f4       	brtc	.+4      	; 0x63e <__divmodhi4+0xa>
 63a:	00 94       	com	r0
 63c:	07 d0       	rcall	.+14     	; 0x64c <__divmodhi4_neg1>
 63e:	77 fd       	sbrc	r23, 7
 640:	09 d0       	rcall	.+18     	; 0x654 <__divmodhi4_neg2>
 642:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodhi4>
 646:	07 fc       	sbrc	r0, 7
 648:	05 d0       	rcall	.+10     	; 0x654 <__divmodhi4_neg2>
 64a:	3e f4       	brtc	.+14     	; 0x65a <__divmodhi4_exit>

0000064c <__divmodhi4_neg1>:
 64c:	90 95       	com	r25
 64e:	81 95       	neg	r24
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	08 95       	ret

00000654 <__divmodhi4_neg2>:
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255

0000065a <__divmodhi4_exit>:
 65a:	08 95       	ret

0000065c <__udivmodhi4>:
 65c:	aa 1b       	sub	r26, r26
 65e:	bb 1b       	sub	r27, r27
 660:	51 e1       	ldi	r21, 0x11	; 17
 662:	07 c0       	rjmp	.+14     	; 0x672 <__udivmodhi4_ep>

00000664 <__udivmodhi4_loop>:
 664:	aa 1f       	adc	r26, r26
 666:	bb 1f       	adc	r27, r27
 668:	a6 17       	cp	r26, r22
 66a:	b7 07       	cpc	r27, r23
 66c:	10 f0       	brcs	.+4      	; 0x672 <__udivmodhi4_ep>
 66e:	a6 1b       	sub	r26, r22
 670:	b7 0b       	sbc	r27, r23

00000672 <__udivmodhi4_ep>:
 672:	88 1f       	adc	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	5a 95       	dec	r21
 678:	a9 f7       	brne	.-22     	; 0x664 <__udivmodhi4_loop>
 67a:	80 95       	com	r24
 67c:	90 95       	com	r25
 67e:	bc 01       	movw	r22, r24
 680:	cd 01       	movw	r24, r26
 682:	08 95       	ret

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
